const pipe = (...fns) => {
  return (x) => {
    for (const fn of fns) x = fn(x);
    return x;
  };
};
const go = (x, ...fns) => pipe(...fns)(x);

let 먹습니다 = (x) => x + " 먹습니다";
let 을 = (x) => x + "을";

// .... 이제 우리는 밥을 먹을 수 있지만...
go("밥", 을, 먹습니다);
// 밥 밖에 못 먹습니다...
go("밥", 을, 먹습니다);
go("밥", 을, 먹습니다);
// 밥 밖에 못 먹습니다... 저는 국도 같이 먹고 싶습니다...

// 하지만 저희는 한번에 하나 밖에 못 먹습니다..
go("국", 을, 먹습니다);

// 국밥은 먹을 수 있네요...
go("국밥", 을, 먹습니다);

// 국과 밥을 도시락(박스)에 한번 감싸면 어떨까요?
const Box = (value) => ({ value });

// 우리는 이제 박스에 담긴것을 먹기위해서 함수를 재정의 합니다.
을 = (x) => x.value + "을";

let 도시락 = Box(["국", "밥"]); // [] <- 도 박스의 일종입니다.

// 우리는 이제 도시락(국, 밥)을 먹을수 있습니다.
go(도시락, 을, 먹습니다);


// 치킨을 먹고 싶은데... 치킨만 먹는건 안되나 봅니다...
go('치킨', 을, 먹습니다);

// 박스인지를 추가해봅시다.
Box.isBox = (box) => typeof box === "object" && "value" in box;

을 = (x) => (Box.isBox(x) ? x.value : x) + "을";
go('치킨', 을, 먹습니다);
go(도시락, 을, 먹습니다);

// 이제 우리는 치킨도 먹고 도시락도 먹을 수 있습니다!!!